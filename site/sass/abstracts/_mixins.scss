/*------------------------------------*\
    $Mixins
\*------------------------------------*/


/* ============================================
    Media Query
*/
@mixin media-query($queries...) {
    @each $query in $queries {
        @each $breakpoint in $breakpoints {
            $name:        nth($breakpoint, 1);
            $declaration: nth($breakpoint, 2);

            @if $query == $name and $declaration {
                @media only screen and #{$declaration} {
                    @content;
                }
            }
        }
    }
}


/* ============================================
  Placeholder text
*/
@mixin placeholder-text {
    // sass-lint:disable no-vendor-prefixes
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
    // sass-lint:enddisable
};


/* ============================================
  iOS Native vertical scroll
*/
@mixin native-vertical-scroll {
    position: relative; // Ensures container is considered the offsetParent() in JS
    overflow-y: scroll;
    overflow-x: hidden;
    -webkit-overflow-scrolling: touch; // sass-lint:disable-line no-misspelled-properties
}


/* ============================================
   Aligner: placeholder class used to align
   components at the template-level
   For want of a better place to put this I've left it here:
*/
@mixin aligner {
    max-width: $max-width;
    margin: 0 auto;
}


/* ============================================
   Gutter spacing
*/
@mixin gutter($top: 0.5, $right: 0.5, $bottom: 0.5, $left: 0.5, $reset: false) {

    @if $top > 0 {
        padding-top: $gutter--mobile * $top;
        @include media-query(tablet-portrait) {
            padding-top: $gutter--tablet * $top;
        }
        @include media-query(desktop) {
            padding-top: $gutter--desktop * $top;
        }
        @include media-query(desktop-wide) {
            padding-top: $gutter--desktop-wide * $top;
        }
    } @elseif $top == 0 and $reset {
        padding-top: 0;
        @include media-query(tablet-portrait) {
            padding-top: 0;
        }
        @include media-query(desktop) {
            padding-top: 0;
        }
        @include media-query(desktop-wide) {
            padding-top: 0;
        }
    }

    @if $bottom > 0 {
        padding-bottom: $gutter--mobile * $bottom;
        @include media-query(tablet-portrait) {
            padding-bottom: $gutter--tablet * $bottom;
        }
        @include media-query(desktop) {
            padding-bottom: $gutter--desktop * $bottom;
        }
        @include media-query(desktop-wide) {
            padding-bottom: $gutter--desktop-wide * $bottom;
        }
    } @elseif $bottom == 0 and $reset {
        padding-bottom: 0;
        @include media-query(tablet-portrait) {
            padding-bottom: 0;
        }
        @include media-query(desktop) {
            padding-bottom: 0;
        }
        @include media-query(desktop-wide) {
            padding-bottom: 0;
        }
    }

    @if $right > 0 {
        padding-right: $gutter--mobile * $right;
        @include media-query(tablet-portrait) {
            padding-right: $gutter--tablet * $right;
        }
        @include media-query(desktop) {
            padding-right: $gutter--desktop * $right;
        }
        @include media-query(desktop-wide) {
            padding-right: $gutter--desktop-wide * $right;
        }
    } @elseif $right == 0 and $reset {
        padding-right: 0;
        @include media-query(tablet-portrait) {
            padding-right: 0;
        }
        @include media-query(desktop) {
            padding-right: 0;
        }
        @include media-query(desktop-wide) {
            padding-right: 0;
        }
    }

    @if $left > 0 {
        padding-left: $gutter--mobile * $left;
        @include media-query(tablet-portrait) {
            padding-left: $gutter--tablet * $left;
        }
        @include media-query(desktop) {
            padding-left: $gutter--desktop * $left;
        }
        @include media-query(desktop-wide) {
            padding-left: $gutter--desktop-wide * $left;
        }
    } @elseif $left == 0 and $reset {
        padding-left: 0;
        @include media-query(tablet-portrait) {
            padding-left: 0;
        }
        @include media-query(desktop) {
            padding-left: 0;
        }
        @include media-query(desktop-wide) {
            padding-left: 0;
        }
    }
}


/* ============================================
  Hide text
*/
@mixin visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    overflow: hidden;
    clip: rect(1px, 1px, 1px, 1px);
}


/* ============================================
    Output a rem and px fallback value for the given property
*/
@mixin rem($property, $values) {

    $px:  ();
    $rem: ();

    @each $value in $values {
        @if $value == 0 or $value == auto or $value == inherit {
            $px:  append($px, $value);
            $rem: append($rem, $value);
        } @else {
            $px:  append($px, $value);
            $rem: append($rem, rem(strip-unit($value)));
        }
    }
    // sass-lint:disable no-duplicate-properties
    #{$property}: $px;
    #{$property}: $rem;
    // sass-lint:enddisable
}


/* ============================================
    Output a `font-size: [x]rem;` declaration for the given px value
*/
@mixin rem-font-size($font-size) {
    @include rem(font-size, $font-size);
}


/* ============================================
    Font sizes
*/
@mixin font-size($keyword) {
    $size: map-get($font-sizes, $keyword);

    @if $size == null {
        @warn 'Font size ‘#{$keyword}’ does not exist';
    } @else {
        @include rem-font-size($size);
    }
}
